@{
    ViewBag.Title = "Load File";
}

<h2>@ViewBag.Title</h2>
<div ng-controller="loadFileController">
    <h3>Upload a file</h3>
    <div class="alert alert-success" ng-show="uploadFileResult.successMessage">
        {{uploadFileResult.successMessage}}
    </div>
    <div class="alert alert-danger" ng-show="warningMessage">
        {{warningMessage}}
    </div>
    <div class="alert alert-danger" ng-show="uploadFileResult.errorMessage">
        {{uploadFileResult.errorMessage}}
    </div>
    <div>
        <div>
            <label for="upload-file-destination">Uploader le fichier vers : </label>
            <input id="upload-file-destination" class="form-control" ng-model="uploadFileDestination" disabled/>
        </div>
        <hr/>
        <div>
            <h4>Fonction de base qui devrait être utilisée pour lire un stream mais qui est ici utilisée pour copier un fichier avec une destination en dur pour vérifier son bon fonctionnement.</h4>
            <input id="uploadFileToReadStream" name="uploadFileToReadStream" type="file">
            <button class="btn btn-primary" ng-click="uploadFileToReadStream()">
                Upload
            </button>
        </div>
        <hr/>
        <div>
            <h4>Fonction permettant la copie d'un fichier, réelle fonction d'upload.</h4>
            <input id="uploadFile" name="uploadFile" type="file">
            <button class="btn btn-primary" ng-click="uploadFile()">
                Upload
            </button>
        </div>
    </div>
    <hr />
    <h3>Download a file</h3>
    <div>
        <ul class="list-group">
            <li ng-repeat="file in files" class="list-group-item"><span class="glyphicon glyphicon-cloud-download"></span><span class="file-name-label">{{file.name}}</span></li>
        </ul>
    </div>
    <div ng-show="!thereIsFile()">
        <p>
            Il n'y a aucun fichier dans {{uploadFileDestination}}
        </p>
    </div>
</div>
@Scripts.Render("~/bundles/loadFile")
@Styles.Render("~/Content/css/loadFile")